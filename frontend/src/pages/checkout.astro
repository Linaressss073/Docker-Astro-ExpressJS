---
// src/pages/checkout.astro
import Layout from '../layouts/Page.astro';
import { Image } from 'astro:assets';
// Importa tu lista de menú para poder obtener los detalles de los ítems
// import { menuLista } from '../../src/menu/menuLista.js'; // No longer strictly needed here if cart items are rich

// Esta función se ejecutará en el servidor al construir la página,
// pero la lógica del carrito es del lado del cliente.
// Dejaremos el renderizado del carrito para el script del cliente.

const pageTitle = "Finalizar Compra";
---

<Layout title={pageTitle}>
  <div class="checkout-hero">
    <div class="container text-center">
      <h1 class="checkout-title">{pageTitle}</h1>
      <p class="checkout-subtitle">Revisa tu pedido y completa tus datos.</p>
    </div>
  </div>

  <main class="container py-5">
    <div class="checkout-wrapper">
      <div class="order-summary-column">
        <h2>Resumen de tu Pedido</h2>
        <div id="cart-items-summary" class="cart-items-summary">
          <!-- Los ítems del carrito se cargarán aquí por JS -->
          <p class="empty-cart-message">Tu carrito está vacío. <a href="/menu-restaurante">Vuelve al menú</a>.</p>
        </div>
        <div class="order-total">
          <strong>Total del Pedido: $<span id="order-total-amount">0.00</span></strong>
        </div>
      </div>

      <div class="customer-details-column">
        <h2>Tus Datos</h2>
        <form id="checkout-form" class="checkout-form">
          <div class="form-group">
            <label for="name">Nombre Completo</label>
            <input type="text" id="name" name="name" required />
          </div>
          <div class="form-group">
            <label for="email">Correo Electrónico</label>
            <input type="email" id="email" name="email" required />
          </div>
          <div class="form-group">
            <label for="phone">Teléfono</label>
            <input type="tel" id="phone" name="phone" />
          </div>
          <div class="form-group">
            <label for="address">Dirección de Entrega</label>
            <textarea id="address" name="address" rows="3"></textarea>
          </div>
          <div class="form-group">
            <label for="payment-method">Método de Pago</label>
            <select id="payment-method" name="payment-method">
              <option value="cash">Efectivo al Entregar</option>
              <option value="card-on-delivery">Tarjeta al Entregar</option>
              <option value="online-simulated">Pago Online (Simulado)</option>
            </select>
          </div>
          <button type="submit" class="submit-order-btn">Confirmar Pedido</button>
        </form>
      </div>
    </div>
  </main>
</Layout>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const cartItemsSummaryContainer = document.getElementById('cart-items-summary');
    const orderTotalAmountSpan = document.getElementById('order-total-amount');
    const checkoutForm = document.getElementById('checkout-form');
    const emptyCartMessage = cartItemsSummaryContainer.querySelector('.empty-cart-message');

    // getItemDetails is no longer needed if cart items from localStorage are rich (contain name, price, imageSrc)
    // function getItemDetails(itemId) { ... } 

    function getCart() {
      const cart = localStorage.getItem('restaurantCart');
      return cart ? JSON.parse(cart) : [];
    }

    function displayCartSummary() {
      const cart = getCart();
      cartItemsSummaryContainer.innerHTML = ''; // Limpiar resumen anterior
      let currentTotal = 0;

      if (cart.length === 0) {
        cartItemsSummaryContainer.appendChild(emptyCartMessage);
        emptyCartMessage.style.display = 'block';
        orderTotalAmountSpan.textContent = '0.00';
        return;
      }
      emptyCartMessage.style.display = 'none';


      const ul = document.createElement('ul');
      ul.className = 'cart-summary-list';

      cart.forEach(cartItem => {
        // Now cartItem itself contains name, price, imageSrc, quantity
        if (cartItem && cartItem.name && cartItem.price !== undefined) {
          const li = document.createElement('li');
          li.className = 'cart-summary-item';
          
          // Miniatura de imagen (opcional)
          if (cartItem.imageSrc) {
            const imgContainer = document.createElement('div');
            imgContainer.className = 'summary-item-image-container';
            const img = document.createElement('img');
            img.src = cartItem.imageSrc;
            img.alt = cartItem.name;
            imgContainer.appendChild(img);
            li.appendChild(imgContainer);
          }

          const nameSpan = document.createElement('span');
          nameSpan.className = 'item-name';
          nameSpan.textContent = `${cartItem.name} (x${cartItem.quantity})`;
          li.appendChild(nameSpan);

          const priceSpan = document.createElement('span');
          priceSpan.className = 'item-price';
          const itemSubtotal = cartItem.price * cartItem.quantity;
          priceSpan.textContent = `$${itemSubtotal.toFixed(2)}`;
          li.appendChild(priceSpan);
          
          ul.appendChild(li);
          currentTotal += itemSubtotal;
        } else {
          console.warn(`Cart item with ID: ${cartItem.id} is missing details. Item:`, cartItem);
        }
      });
      cartItemsSummaryContainer.appendChild(ul);
      orderTotalAmountSpan.textContent = currentTotal.toFixed(2);
    }

    checkoutForm.addEventListener('submit', async (event) => {
      event.preventDefault();
      const submitButton = checkoutForm.querySelector('button[type="submit"]');
      submitButton.disabled = true;
      submitButton.textContent = 'Procesando...';

      const formData = new FormData(checkoutForm);
      const orderDetails = Object.fromEntries(formData.entries());
      const cart = getCart();

      if (cart.length === 0) {
        alert("Tu carrito está vacío. Añade algunos ítems antes de confirmar.");
        submitButton.disabled = false;
        submitButton.textContent = 'Confirmar Pedido';
        return;
      }

      const orderPayload = {
        customer: orderDetails,
        items: cart,
        total: parseFloat(orderTotalAmountSpan.textContent)
      };

      try {
        // Asegúrate de que la URL coincida con tu endpoint de backend
        // Si tu backend corre en un puerto diferente (ej. 3000) y Astro en otro (ej. 4321)
        // necesitarás la URL completa o configurar un proxy en Astro (astro.config.mjs)
        const response = await fetch('/api/orders/create-order', { // Updated to use the new backend route
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(orderPayload),
        });

        const result = await response.json();

        if (response.ok) {
          // Check the 'success' field from your backend's response
          if (result.success) {
            alert(`¡Gracias por tu pedido! ${result.message || ''} Tu número de orden es: ${result.orderId || 'N/A'}`);
            localStorage.removeItem('restaurantCart');
            // Ensure you have an order-confirmation page or adjust the redirect
            window.location.href = `/order-confirmation?orderId=${result.orderId || ''}`; 
          } else {
            // Handle cases where the backend operation wasn't successful but HTTP status was OK
            alert(`Error al procesar el pedido: ${result.message || 'El servidor indicó un problema con el pedido.'}`);
          }
        } else {
          // Handle HTTP errors (4xx, 5xx)
          alert(`Error del servidor: ${response.status} - ${result.message || 'No se pudo completar el pedido. Inténtalo de nuevo.'}`);
        }
      } catch (error) {
        console.error('Error al enviar el pedido:', error);
        alert('Hubo un problema al conectar con el servidor. Por favor, inténtalo más tarde.');
      } finally {
        submitButton.disabled = false;
        submitButton.textContent = 'Confirmar Pedido';
      }
    });

    // Cargar el resumen del carrito al cargar la página
    displayCartSummary();
  });
</script>

<style>
  .checkout-hero {
    background: linear-gradient(to right, #2c3e50, #3498db); /* Similar al menú */
    color: white;
    text-align: center;
    padding: 3rem 2rem;
    margin-bottom: 2rem;
  }

  .checkout-title {
    font-size: 2.8rem;
    font-weight: 700;
    margin-bottom: 0.75rem;
  }

  .checkout-subtitle {
    font-size: 1.1rem;
    opacity: 0.9;
  }

  .checkout-wrapper {
    display: grid;
    grid-template-columns: 1fr; /* Stack by default */
    gap: 3rem;
    max-width: 1100px;
    margin: 0 auto;
  }

  @media (min-width: 768px) {
    .checkout-wrapper {
      grid-template-columns: 1.2fr 1fr; /* Resumen a la izquierda, formulario a la derecha */
    }
  }

  .order-summary-column,
  .customer-details-column {
    background-color: #f8f9fa;
    padding: 2rem;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.05);
  }

  .order-summary-column h2,
  .customer-details-column h2 {
    font-size: 1.5rem;
    color: #333;
    margin-bottom: 1.5rem;
    padding-bottom: 0.75rem;
    border-bottom: 1px solid #e0e0e0;
  }
  
  .summary-item-image-container {
    width: 50px; /* Adjust as needed */
    height: 50px; /* Adjust as needed */
    margin-right: 1rem;
    overflow: hidden;
    border-radius: 4px;
  }
  .summary-item-image-container img {
    width: 100%; height: 100%; object-fit: cover;
  }
  .cart-items-summary .empty-cart-message {
    color: #666;
    font-style: italic;
  }
  .cart-items-summary .empty-cart-message a {
    color: #3498db;
    text-decoration: underline;
  }


  .cart-summary-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .cart-summary-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem 0;
    border-bottom: 1px dashed #eee;
  }
  .cart-summary-item:last-child {
    border-bottom: none;
  }
  .cart-summary-item .item-name {
    color: #555;
    flex-grow: 1;
  }
  .cart-summary-item .item-price {
    color: #333;
    font-weight: 500;
    margin-left: 1rem;
  }

  .order-total {
    margin-top: 1.5rem;
    padding-top: 1rem;
    border-top: 2px solid #3498db;
    text-align: right;
    font-size: 1.2rem;
  }
  .order-total strong {
    color: #2c3e50;
  }

  .checkout-form .form-group {
    margin-bottom: 1.5rem;
  }

  .checkout-form label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: #444;
  }

  .checkout-form input[type="text"],
  .checkout-form input[type="email"],
  .checkout-form input[type="tel"],
  .checkout-form textarea,
  .checkout-form select {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #ccc;
    border-radius: 6px;
    font-size: 1rem;
    box-sizing: border-box; /* Importante para que el padding no afecte el ancho total */
  }
  .checkout-form input:focus,
  .checkout-form textarea:focus,
  .checkout-form select:focus {
    outline: none;
    border-color: #3498db;
    box-shadow: 0 0 0 0.15rem rgba(52, 152, 219, 0.2);
  }


  .checkout-form textarea {
    resize: vertical;
  }

  .submit-order-btn {
    display: block;
    width: 100%;
    padding: 1rem;
    background-color: #28a745; /* Verde consistente con "Añadir al carrito" */
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  .submit-order-btn:hover {
    background-color: #218838;
  }
</style>
