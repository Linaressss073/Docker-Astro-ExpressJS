---
const { roomId } = Astro.params;
const today = new Date().toISOString().split('T')[0];
// Ensure this path is correct based on your project structure
import BaseLayout from '../../../layouts/Base.astro'; 
---
<script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script> 
<BaseLayout>
  <main id="content" class="min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8 bg-gradient-to-br from-blue-50 to-indigo-100">
    <div class="max-w-md w-full space-y-8 bg-white p-10 rounded-3xl shadow-2xl border border-gray-100 transform transition-all duration-300 hover:scale-102 hover:shadow-3xl">
      <h1 class="text-5xl font-extrabold text-center text-gray-900 tracking-tight leading-tight mb-6">
        Reserva de <span class="text-blue-600">Habitación #{roomId}</span>
      </h1>
      <p class="mt-2 text-center text-lg text-gray-600">
        ¡Tu escapada perfecta comienza aquí!
      </p>

      <form id="reservaForm" class="mt-8 space-y-6">
        <div>
          <label for="usuarioId" class="block text-sm font-medium text-gray-700 mb-2">Usuario ID:</label>
          <input
            id="usuarioId"
            name="usuarioId"
            type="number"
            required
            min="1"
            class="appearance-none relative block w-full px-4 py-3 border border-gray-300 placeholder-gray-400 text-gray-900 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-300 ease-in-out sm:text-lg"
            placeholder="Introduce tu ID de usuario"
          />
        </div>

        <div>
          <label for="fechaEntrada" class="block text-sm font-medium text-gray-700 mb-2">Fecha de Entrada:</label>
          <input
            id="fechaEntrada"
            name="fechaEntrada"
            type="date"
            required
            min={today}
            class="appearance-none relative block w-full px-4 py-3 border border-gray-300 text-gray-900 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-300 ease-in-out sm:text-lg"
          />
        </div>

        <div>
          <label for="fechaSalida" class="block text-sm font-medium text-gray-700 mb-2">Fecha de Salida:</label>
          <input
            id="fechaSalida"
            name="fechaSalida"
            type="date"
            required
            min={today}
            class="appearance-none relative block w-full px-4 py-3 border border-gray-300 text-gray-900 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-300 ease-in-out sm:text-lg"
          />
        </div>

        <div>
          <label for="cantidadPersonas" class="block text-sm font-medium text-gray-700 mb-2">Cantidad de Personas:</label>
          <input
            id="cantidadPersonas"
            name="cantidadPersonas"
            type="number"
            min="1"
            max="10"
            required
            class="appearance-none relative block w-full px-4 py-3 border border-gray-300 placeholder-gray-400 text-gray-900 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-300 ease-in-out sm:text-lg"
            placeholder="¿Cuántos acompañantes?"
          />
        </div>

        <button
          type="submit"
          id="submitBtn"
          class="group relative w-full flex justify-center py-3 px-4 border border-transparent text-lg font-semibold rounded-lg text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-3 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-300 ease-in-out transform hover:-translate-y-1 hover:shadow-lg active:scale-98"
        >
          <span class="absolute left-0 inset-y-0 flex items-center pl-3">
            <svg class="h-6 w-6 text-blue-300 group-hover:text-white transition-colors duration-200" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
              <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd" />
            </svg>
          </span>
          Reservar Ahora
        </button>
      </form>
      <div id="message" class="mt-6 text-center text-base font-medium"></div>
    </div>
  </main>
</BaseLayout>

<script is:inline define:vars={{ roomId }}>
  const form = document.getElementById('reservaForm');
  const message = document.getElementById('message');
  const submitBtn = document.getElementById('submitBtn');
  const fechaEntradaInput = form.fechaEntrada;
  const fechaSalidaInput = form.fechaSalida;

  function showMessage(text, type = 'info') {
    message.textContent = text;
    message.className = `mt-6 text-center text-base font-medium ${
      type === 'error' ? 'text-red-600' :
      type === 'success' ? 'text-green-600' :
      type === 'info' ? 'text-blue-600' : 'text-gray-600'
    }`;
  }

  fechaEntradaInput.addEventListener('change', () => {
    const fechaEntrada = fechaEntradaInput.value;
    if (fechaEntrada) {
      const nextDay = new Date(fechaEntrada);
      nextDay.setDate(nextDay.getDate() + 1);
      fechaSalidaInput.min = nextDay.toISOString().split('T')[0];
      
      if (fechaSalidaInput.value && fechaSalidaInput.value <= fechaEntrada) {
        fechaSalidaInput.value = nextDay.toISOString().split('T')[0];
      }
    }
  });

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    submitBtn.disabled = true;
    submitBtn.textContent = 'Procesando...';
    showMessage('Enviando solicitud...', 'info');

    const formData = new FormData(form);
    const data = {
      usuarioId: parseInt(formData.get('usuarioId')),
      fechaEntrada: formData.get('fechaEntrada'),
      fechaSalida: formData.get('fechaSalida'),
      cantidadPersonas: parseInt(formData.get('cantidadPersonas')),
    };

    if (!data.usuarioId || data.usuarioId <= 0) {
      showMessage('Por favor, ingrese un ID de usuario válido', 'error');
      resetButton();
      return;
    }

    if (!data.fechaEntrada || !data.fechaSalida) {
      showMessage('Por favor, seleccione las fechas de entrada y salida', 'error');
      resetButton();
      return;
    }

    if (new Date(data.fechaSalida) <= new Date(data.fechaEntrada)) {
      showMessage('La fecha de salida debe ser posterior a la fecha de entrada', 'error');
      resetButton();
      return;
    }

    try {
      const apiUrl = `http://localhost:3001/api/habitaciones/${encodeURIComponent(roomId)}/generarReserva`;
      console.log('Enviando petición a:', apiUrl);
      console.log('Datos:', data);

      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: JSON.stringify(data),
      });

      console.log('Respuesta del servidor:', response.status, response.statusText);

      let result;
      try {
        result = await response.json();
        console.log('Resultado:', result);
      } catch (parseError) {
        console.error('Error al parsear JSON:', parseError);
        throw new Error(`Error del servidor (${response.status}): No se pudo procesar la respuesta`);
      }

      if (response.ok && result.success) {
        showMessage('¡Reserva creada exitosamente! Redirigiendo...', 'success');
        
        setTimeout(() => {
          window.location.href = `/booking/${roomId}/reserva/${result.reserva.id}`;
        }, 2000);
      } else {
        const errorMessage = result.message || `Error del servidor: ${response.status} - ${response.statusText}`;
        showMessage(errorMessage, 'error');
        resetButton();
      }
    } catch (error) {
      console.error('Error de conexión:', error);
      showMessage(`Error de conexión: ${error.message}`, 'error');
      resetButton();
    }
  });

  function resetButton() {
    submitBtn.disabled = false;
    submitBtn.textContent = 'Reservar Ahora';
  }

  form.addEventListener('input', () => {
    message.textContent = '';
  });
</script>